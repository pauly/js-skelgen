/**
 * generated by /home/paul/vows-skelgen/skelgen.js
 * https://github.com/pauly/vows-skelgen
 * @todo parse the file and use @assert rules
 * Thu Jul 18 2013 12:48:19 GMT+0000 (UTC)
 */

var assert = require( 'assert' );
var vows = require( 'vows' );
var file = '/home/paul/vows-skelgen/lib/skelgen.js';
var skelgen = require( file );

vows.describe( 'skelgen' ).addBatch( {
  'skelgen.baseName': {
    'handles good input': function ( ) {
      // var result = skelgen.baseName( );
      // var expect = { };
      // assert.equal( result, expect );
    },
    'handles bad input': {
      'handles foo': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.baseName( 'foo' );
          }
        );
      },
      'handles 66': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.baseName( 66 );
          }
        );
      },
      'handles undefined': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.baseName( undefined );
          }
        );
      },
      'handles null': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.baseName( null );
          }
        );
      },
      'handles []': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.baseName( [] );
          }
        );
      },
      'handles {}': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.baseName( {} );
          }
        );
      },
      'handles new Date( )': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.baseName( new Date( ) );
          }
        );
      }
    }
  },
  'skelgen.getFile': {
    'handles good input': function ( ) {
      // var result = skelgen.getFile( );
      // var expect = { };
      // assert.equal( result, expect );
    },
    'handles bad input': {
      'handles foo': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.getFile( 'foo' );
          }
        );
      },
      'handles 66': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.getFile( 66 );
          }
        );
      },
      'handles undefined': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.getFile( undefined );
          }
        );
      },
      'handles null': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.getFile( null );
          }
        );
      },
      'handles []': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.getFile( [] );
          }
        );
      },
      'handles {}': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.getFile( {} );
          }
        );
      },
      'handles new Date( )': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.getFile( new Date( ) );
          }
        );
      }
    }
  },
  'skelgen.writeTests': {
    'handles good input': function ( ) {
      // var result = skelgen.writeTests( );
      // var expect = { };
      // assert.equal( result, expect );
    },
    'handles bad input': {
      'handles foo': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.writeTests( 'foo','foo' );
          }
        );
      },
      'handles 66': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.writeTests( 66,66 );
          }
        );
      },
      'handles undefined': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.writeTests( undefined,undefined );
          }
        );
      },
      'handles null': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.writeTests( null,null );
          }
        );
      },
      'handles []': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.writeTests( [],[] );
          }
        );
      },
      'handles {}': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.writeTests( {},{} );
          }
        );
      },
      'handles new Date( )': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.writeTests( new Date( ),new Date( ) );
          }
        );
      }
    }
  },
  'skelgen.stringify': {
    'handles good input': function ( ) {
      // var result = skelgen.stringify( );
      // var expect = { };
      // assert.equal( result, expect );
    },
    'handles bad input': {
      'handles foo': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.stringify( 'foo' );
          }
        );
      },
      'handles 66': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.stringify( 66 );
          }
        );
      },
      'handles undefined': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.stringify( undefined );
          }
        );
      },
      'handles null': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.stringify( null );
          }
        );
      },
      'handles []': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.stringify( [] );
          }
        );
      },
      'handles {}': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.stringify( {} );
          }
        );
      },
      'handles new Date( )': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.stringify( new Date( ) );
          }
        );
      }
    }
  },
  'skelgen.map': {
    'handles good input': function ( ) {
      // var result = skelgen.map( );
      // var expect = { };
      // assert.equal( result, expect );
    },
    'handles bad input': {
      'handles foo': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.map( 'foo','foo' );
          }
        );
      },
      'handles 66': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.map( 66,66 );
          }
        );
      },
      'handles undefined': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.map( undefined,undefined );
          }
        );
      },
      'handles null': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.map( null,null );
          }
        );
      },
      'handles []': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.map( [],[] );
          }
        );
      },
      'handles {}': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.map( {},{} );
          }
        );
      },
      'handles new Date( )': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.map( new Date( ),new Date( ) );
          }
        );
      }
    }
  },
  'skelgen.asyncTests': {
    'handles good input': function ( ) {
      // var result = skelgen.asyncTests( );
      // var expect = { };
      // assert.equal( result, expect );
    },
    'handles bad input': {
      'handles foo': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.asyncTests( 'foo','foo' );
          }
        );
      },
      'handles 66': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.asyncTests( 66,66 );
          }
        );
      },
      'handles undefined': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.asyncTests( undefined,undefined );
          }
        );
      },
      'handles null': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.asyncTests( null,null );
          }
        );
      },
      'handles []': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.asyncTests( [],[] );
          }
        );
      },
      'handles {}': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.asyncTests( {},{} );
          }
        );
      },
      'handles new Date( )': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.asyncTests( new Date( ),new Date( ) );
          }
        );
      }
    }
  },
  'skelgen.goodInputExample': {
    'handles good input': function ( ) {
      // var result = skelgen.goodInputExample( );
      // var expect = { };
      // assert.equal( result, expect );
    },
    'handles bad input': {
      'handles foo': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.goodInputExample( 'foo' );
          }
        );
      },
      'handles 66': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.goodInputExample( 66 );
          }
        );
      },
      'handles undefined': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.goodInputExample( undefined );
          }
        );
      },
      'handles null': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.goodInputExample( null );
          }
        );
      },
      'handles []': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.goodInputExample( [] );
          }
        );
      },
      'handles {}': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.goodInputExample( {} );
          }
        );
      },
      'handles new Date( )': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.goodInputExample( new Date( ) );
          }
        );
      }
    }
  },
  'skelgen.syncTests': {
    'handles good input': function ( ) {
      // var result = skelgen.syncTests( );
      // var expect = { };
      // assert.equal( result, expect );
    },
    'handles bad input': {
      'handles foo': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.syncTests( 'foo','foo' );
          }
        );
      },
      'handles 66': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.syncTests( 66,66 );
          }
        );
      },
      'handles undefined': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.syncTests( undefined,undefined );
          }
        );
      },
      'handles null': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.syncTests( null,null );
          }
        );
      },
      'handles []': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.syncTests( [],[] );
          }
        );
      },
      'handles {}': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.syncTests( {},{} );
          }
        );
      },
      'handles new Date( )': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.syncTests( new Date( ),new Date( ) );
          }
        );
      }
    }
  },
  'skelgen.generate': {
    'handles good input': function ( ) {
      // var result = skelgen.generate( );
      // var expect = { };
      // assert.equal( result, expect );
    },
    'handles bad input': {
      'handles foo': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.generate( 'foo' );
          }
        );
      },
      'handles 66': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.generate( 66 );
          }
        );
      },
      'handles undefined': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.generate( undefined );
          }
        );
      },
      'handles null': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.generate( null );
          }
        );
      },
      'handles []': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.generate( [] );
          }
        );
      },
      'handles {}': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.generate( {} );
          }
        );
      },
      'handles new Date( )': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.generate( new Date( ) );
          }
        );
      }
    }
  }
} ).run( );

