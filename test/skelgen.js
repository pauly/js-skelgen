/**
 * generated by /home/paul/vows-skelgen/skelgen.js
 * https://github.com/pauly/vows-skelgen
 * Mon Jul 22 2013 13:55:38 GMT+0000 (UTC)
 */

var assert = require( 'assert' );
var vows = require( 'vows' );
var file = '/home/paul/vows-skelgen/lib/skelgen.js';
var skelgen = require( file );

vows.describe( 'skelgen' ).addBatch( {
  'skelgen.sanitise': {
    'handles good input': function ( ) {
      assert.equal( skelgen.sanitise( 'foo'  ), 'foo' );
      assert.equal( skelgen.sanitise( 66  ), '66' );
    },
    'handles bad input': function ( ) {
      assert.doesNotThrow(
        function ( ) {
          skelgen.sanitise( 'foo' );
          skelgen.sanitise( 66 );
          skelgen.sanitise( undefined );
          skelgen.sanitise( null );
          skelgen.sanitise( [] );
          skelgen.sanitise( {} );
          skelgen.sanitise( new Date( ) );
        }
      );
    }
  },
  'skelgen.baseName': {
    'handles good input': function ( ) {
      assert.equal( skelgen.baseName( 'foo/bar.js'  ), 'bar' );
      assert.equal( skelgen.baseName( 'foo/bar'  ), 'bar' );
      assert.equal( skelgen.baseName( 'foo.js'  ), 'foo' );
      assert.equal( skelgen.baseName( 'foo'  ), 'foo' );
    },
    'handles bad input': function ( ) {
      assert.doesNotThrow(
        function ( ) {
          skelgen.baseName( 'foo' );
          skelgen.baseName( 66 );
          skelgen.baseName( undefined );
          skelgen.baseName( null );
          skelgen.baseName( [] );
          skelgen.baseName( {} );
          skelgen.baseName( new Date( ) );
        }
      );
    }
  },
  'skelgen.getFile': {
    'handles good input': function ( ) {
    },
    'handles bad input': function ( ) {
      assert.doesNotThrow(
        function ( ) {
          skelgen.getFile( 'foo' );
          skelgen.getFile( 66 );
          skelgen.getFile( undefined );
          skelgen.getFile( null );
          skelgen.getFile( [] );
          skelgen.getFile( {} );
          skelgen.getFile( new Date( ) );
        }
      );
    }
  },
  'skelgen.writeTests': {
    'handles good input': function ( ) {
    },
    'handles bad input': function ( ) {
      assert.doesNotThrow(
        function ( ) {
          skelgen.writeTests( 'foo','foo' );
          skelgen.writeTests( 66,66 );
          skelgen.writeTests( undefined,undefined );
          skelgen.writeTests( null,null );
          skelgen.writeTests( [],[] );
          skelgen.writeTests( {},{} );
          skelgen.writeTests( new Date( ),new Date( ) );
        }
      );
    }
  },
  'skelgen.stringify': {
    'handles good input': function ( ) {
      assert.equal( skelgen.stringify( 66  ), '66' );
      assert.equal( skelgen.stringify( 'foo'  ), '\'foo\'' );
    },
    'handles bad input': function ( ) {
      assert.doesNotThrow(
        function ( ) {
          skelgen.stringify( 'foo' );
          skelgen.stringify( 66 );
          skelgen.stringify( undefined );
          skelgen.stringify( null );
          skelgen.stringify( [] );
          skelgen.stringify( {} );
          skelgen.stringify( new Date( ) );
        }
      );
    }
  },
  'skelgen.map': {
    'handles good input': function ( ) {
    },
    'handles bad input': function ( ) {
      assert.doesNotThrow(
        function ( ) {
          skelgen.map( 'foo' );
          skelgen.map( 66 );
          skelgen.map( undefined );
          skelgen.map( null );
          skelgen.map( [] );
          skelgen.map( {} );
          skelgen.map( new Date( ) );
        }
      );
    }
  },
  'skelgen.asyncTests': {
    'handles good input': function ( ) {
    },
    'handles bad input': function ( ) {
      assert.doesNotThrow(
        function ( ) {
          skelgen.asyncTests( 'foo','foo' );
          skelgen.asyncTests( 66,66 );
          skelgen.asyncTests( undefined,undefined );
          skelgen.asyncTests( null,null );
          skelgen.asyncTests( [],[] );
          skelgen.asyncTests( {},{} );
          skelgen.asyncTests( new Date( ),new Date( ) );
        }
      );
    }
  },
  'skelgen.commentBefore': {
    'handles good input': function ( ) {
    },
    'handles bad input': function ( ) {
      assert.doesNotThrow(
        function ( ) {
          skelgen.commentBefore( 'foo' );
          skelgen.commentBefore( 66 );
          skelgen.commentBefore( undefined );
          skelgen.commentBefore( null );
          skelgen.commentBefore( [] );
          skelgen.commentBefore( {} );
          skelgen.commentBefore( new Date( ) );
        }
      );
    }
  },
  'skelgen.assertsFrom': {
    'handles good input': function ( ) {
    },
    'handles bad input': function ( ) {
      assert.doesNotThrow(
        function ( ) {
          skelgen.assertsFrom( 'foo' );
          skelgen.assertsFrom( 66 );
          skelgen.assertsFrom( undefined );
          skelgen.assertsFrom( null );
          skelgen.assertsFrom( [] );
          skelgen.assertsFrom( {} );
          skelgen.assertsFrom( new Date( ) );
        }
      );
    }
  },
  'skelgen.goodInputTests': {
    'handles good input': function ( ) {
    },
    'handles bad input': function ( ) {
      assert.doesNotThrow(
        function ( ) {
          skelgen.goodInputTests( 'foo','foo' );
          skelgen.goodInputTests( 66,66 );
          skelgen.goodInputTests( undefined,undefined );
          skelgen.goodInputTests( null,null );
          skelgen.goodInputTests( [],[] );
          skelgen.goodInputTests( {},{} );
          skelgen.goodInputTests( new Date( ),new Date( ) );
        }
      );
    }
  },
  'skelgen.goodInputTestsAsync': {
    'handles good input': function ( ) {
    },
    'handles bad input': function ( ) {
      assert.doesNotThrow(
        function ( ) {
          skelgen.goodInputTestsAsync( 'foo','foo' );
          skelgen.goodInputTestsAsync( 66,66 );
          skelgen.goodInputTestsAsync( undefined,undefined );
          skelgen.goodInputTestsAsync( null,null );
          skelgen.goodInputTestsAsync( [],[] );
          skelgen.goodInputTestsAsync( {},{} );
          skelgen.goodInputTestsAsync( new Date( ),new Date( ) );
        }
      );
    }
  },
  'skelgen.syncTests': {
    'handles good input': function ( ) {
    },
    'handles bad input': function ( ) {
      assert.doesNotThrow(
        function ( ) {
          skelgen.syncTests( 'foo','foo' );
          skelgen.syncTests( 66,66 );
          skelgen.syncTests( undefined,undefined );
          skelgen.syncTests( null,null );
          skelgen.syncTests( [],[] );
          skelgen.syncTests( {},{} );
          skelgen.syncTests( new Date( ),new Date( ) );
        }
      );
    }
  },
  'skelgen.generate': {
    'handles good input': function ( ) {
    },
    'handles bad input': function ( ) {
      assert.doesNotThrow(
        function ( ) {
          skelgen.generate( 'foo' );
          skelgen.generate( 66 );
          skelgen.generate( undefined );
          skelgen.generate( null );
          skelgen.generate( [] );
          skelgen.generate( {} );
          skelgen.generate( new Date( ) );
        }
      );
    }
  }
} ).run( { }, function _checkAllOK ( result ) {
  assert.equal( result.honored + result.pending, result.total );
  process.exit( 0 );
} );

