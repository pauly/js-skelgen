/**
 * generated by node,/home/paul/vows-skelgen/skelgen.js,lib/skelgen.js,--output,test/skelgen.js
 * https://github.com/pauly/js-skelgen
 * Wed Aug 21 2013 10:39:35 GMT+0000 (UTC)
 */

var assert = require( 'assert' );
var file = '../lib/skelgen.js';
var skelgen = require( file );

describe( 'skelgen', function ( ) {
  describe( 'skelgen.sanitise', function ( ) {
    it( 'handles good input', function ( ) {
      assert.deepEqual( skelgen.sanitise( 'foo' ), 'foo' );
      assert.deepEqual( skelgen.sanitise( 66 ), '66' );
      assert.deepEqual( skelgen.sanitise( 'foo \'bar\'' ), 'foo bar' );
    } );
    it( 'handles malformed input', function ( ) {
      assert.doesNotThrow( function ( ) {
          skelgen.sanitise( 'foo' );
          skelgen.sanitise( 66 );
          skelgen.sanitise( undefined );
          skelgen.sanitise( null );
          skelgen.sanitise( [] );
          skelgen.sanitise( {} );
          skelgen.sanitise( new Date( ) );
      } );
    } );
  } );
  describe( 'skelgen.uninstantiate', function ( ) {
    it( 'handles good input', function ( ) {
      assert.deepEqual( skelgen.uninstantiate( 'foo' ), 'foo' );
      assert.deepEqual( skelgen.uninstantiate( 66 ), '66' );
      assert.deepEqual( skelgen.uninstantiate( 'new foo( )' ), 'foo' );
      assert.deepEqual( skelgen.uninstantiate( 'new foo()' ), 'foo' );
    } );
    it( 'handles malformed input', function ( ) {
      assert.doesNotThrow( function ( ) {
          skelgen.uninstantiate( 'foo' );
          skelgen.uninstantiate( 66 );
          skelgen.uninstantiate( undefined );
          skelgen.uninstantiate( null );
          skelgen.uninstantiate( [] );
          skelgen.uninstantiate( {} );
          skelgen.uninstantiate( new Date( ) );
      } );
    } );
  } );
  describe( 'skelgen.baseName', function ( ) {
    it( 'handles good input', function ( ) {
      assert.deepEqual( skelgen.baseName( 'foo/bar.js' ), 'bar' );
      assert.deepEqual( skelgen.baseName( 'foo/bar' ), 'bar' );
      assert.deepEqual( skelgen.baseName( 'foo.js' ), 'foo' );
      assert.deepEqual( skelgen.baseName( 'foo' ), 'foo' );
    } );
    it( 'handles malformed input', function ( ) {
      assert.doesNotThrow( function ( ) {
          skelgen.baseName( 'foo' );
          skelgen.baseName( 66 );
          skelgen.baseName( undefined );
          skelgen.baseName( null );
          skelgen.baseName( [] );
          skelgen.baseName( {} );
          skelgen.baseName( new Date( ) );
      } );
    } );
  } );
  describe( 'skelgen.writeTests', function ( ) {
    it( 'handles good input', function ( ) {
      // var result = skelgen.writeTests( method,obj );
      // var expect = { };
      // assert.deepEqual( result, expect );
    } );
    it( 'handles malformed input', function ( ) {
      assert.doesNotThrow( function ( ) {
          skelgen.writeTests( 'foo','foo' );
          skelgen.writeTests( 66,66 );
          skelgen.writeTests( undefined,undefined );
          skelgen.writeTests( null,null );
          skelgen.writeTests( [],[] );
          skelgen.writeTests( {},{} );
          skelgen.writeTests( new Date( ),new Date( ) );
      } );
    } );
  } );
  describe( 'skelgen.stringify', function ( ) {
    it( 'handles good input', function ( ) {
      assert.deepEqual( skelgen.stringify( 66 ), '66' );
      assert.deepEqual( skelgen.stringify( 'foo' ), '\'foo\'' );
    } );
    it( 'handles malformed input', function ( ) {
      assert.doesNotThrow( function ( ) {
          skelgen.stringify( 'foo' );
          skelgen.stringify( 66 );
          skelgen.stringify( undefined );
          skelgen.stringify( null );
          skelgen.stringify( [] );
          skelgen.stringify( {} );
          skelgen.stringify( new Date( ) );
      } );
    } );
  } );
  describe( 'skelgen.map', function ( ) {
    it( 'handles good input', function ( ) {
      // var result = skelgen.map( args );
      // var expect = { };
      // assert.deepEqual( result, expect );
    } );
    it( 'handles malformed input', function ( ) {
      assert.doesNotThrow( function ( ) {
          skelgen.map( 'foo' );
          skelgen.map( 66 );
          skelgen.map( undefined );
          skelgen.map( null );
          skelgen.map( [] );
          skelgen.map( {} );
          skelgen.map( new Date( ) );
      } );
    } );
  } );
  describe( 'skelgen.asyncTests', function ( ) {
    it( 'handles good input', function ( ) {
      // var result = skelgen.asyncTests( method,args );
      // var expect = { };
      // assert.deepEqual( result, expect );
    } );
    it( 'handles malformed input', function ( ) {
      assert.doesNotThrow( function ( ) {
          skelgen.asyncTests( 'foo','foo' );
          skelgen.asyncTests( 66,66 );
          skelgen.asyncTests( undefined,undefined );
          skelgen.asyncTests( null,null );
          skelgen.asyncTests( [],[] );
          skelgen.asyncTests( {},{} );
          skelgen.asyncTests( new Date( ),new Date( ) );
      } );
    } );
  } );
  describe( 'skelgen.commentBefore', function ( ) {
    it( 'handles good input', function ( ) {
      // var result = skelgen.commentBefore( method );
      // var expect = { };
      // assert.deepEqual( result, expect );
    } );
    it( 'handles malformed input', function ( ) {
      assert.doesNotThrow( function ( ) {
          skelgen.commentBefore( 'foo' );
          skelgen.commentBefore( 66 );
          skelgen.commentBefore( undefined );
          skelgen.commentBefore( null );
          skelgen.commentBefore( [] );
          skelgen.commentBefore( {} );
          skelgen.commentBefore( new Date( ) );
      } );
    } );
  } );
  describe( 'skelgen.assertsFrom', function ( ) {
    it( 'handles good input', function ( ) {
      assert.deepEqual( skelgen.assertsFrom( ' * @assert (1) == 1' ), [ [ '1', '==', '1' ] ] );
      assert.deepEqual( skelgen.assertsFrom( ' * @assert (2) === 2' ), [ [ '2', '===', '2' ] ] );
      assert.deepEqual( skelgen.assertsFrom( ' * @assert ( 3 ) == 3' ), [ [ '3', '==', '3' ] ] );
      assert.deepEqual( skelgen.assertsFrom( ' * @assert ( 4) == 4\n * @assert (5 ) == 5' ), [ [ '4', '==', '4' ], [ '5', '==', '5' ], ] );
      assert.deepEqual( skelgen.assertsFrom( ' * @assert (\'seven\') == \'seven\'' ), [ [ '\'seven\'', '==', '\'seven\'' ] ] );
    } );
    it( 'handles malformed input', function ( ) {
      assert.doesNotThrow( function ( ) {
          skelgen.assertsFrom( 'foo' );
          skelgen.assertsFrom( 66 );
          skelgen.assertsFrom( undefined );
          skelgen.assertsFrom( null );
          skelgen.assertsFrom( [] );
          skelgen.assertsFrom( {} );
          skelgen.assertsFrom( new Date( ) );
      } );
    } );
  } );
  describe( 'skelgen.goodInputTests', function ( ) {
    it( 'handles good input', function ( ) {
      // var result = skelgen.goodInputTests( method,params );
      // var expect = { };
      // assert.deepEqual( result, expect );
    } );
    it( 'handles malformed input', function ( ) {
      assert.doesNotThrow( function ( ) {
          skelgen.goodInputTests( 'foo','foo' );
          skelgen.goodInputTests( 66,66 );
          skelgen.goodInputTests( undefined,undefined );
          skelgen.goodInputTests( null,null );
          skelgen.goodInputTests( [],[] );
          skelgen.goodInputTests( {},{} );
          skelgen.goodInputTests( new Date( ),new Date( ) );
      } );
    } );
  } );
  describe( 'skelgen.goodInputTestsAsync', function ( ) {
    it( 'handles good input', function ( ) {
      // var result = skelgen.goodInputTestsAsync( method,params );
      // var expect = { };
      // assert.deepEqual( result, expect );
    } );
    it( 'handles malformed input', function ( ) {
      assert.doesNotThrow( function ( ) {
          skelgen.goodInputTestsAsync( 'foo','foo' );
          skelgen.goodInputTestsAsync( 66,66 );
          skelgen.goodInputTestsAsync( undefined,undefined );
          skelgen.goodInputTestsAsync( null,null );
          skelgen.goodInputTestsAsync( [],[] );
          skelgen.goodInputTestsAsync( {},{} );
          skelgen.goodInputTestsAsync( new Date( ),new Date( ) );
      } );
    } );
  } );
  describe( 'skelgen.syncTests', function ( ) {
    it( 'handles good input', function ( ) {
      // var result = skelgen.syncTests( method,args );
      // var expect = { };
      // assert.deepEqual( result, expect );
    } );
    it( 'handles malformed input', function ( ) {
      assert.doesNotThrow( function ( ) {
          skelgen.syncTests( 'foo','foo' );
          skelgen.syncTests( 66,66 );
          skelgen.syncTests( undefined,undefined );
          skelgen.syncTests( null,null );
          skelgen.syncTests( [],[] );
          skelgen.syncTests( {},{} );
          skelgen.syncTests( new Date( ),new Date( ) );
      } );
    } );
  } );
  describe( 'skelgen.generate', function ( ) {
    it( 'handles good input', function ( ) {
      // var result = skelgen.generate(  );
      // var expect = { };
      // assert.deepEqual( result, expect );
    } );
    it( 'handles malformed input', function ( ) {
      assert.doesNotThrow( function ( ) {
          skelgen.generate( 'foo' );
          skelgen.generate( 66 );
          skelgen.generate( undefined );
          skelgen.generate( null );
          skelgen.generate( [] );
          skelgen.generate( {} );
          skelgen.generate( new Date( ) );
      } );
    } );
  } );

} );
