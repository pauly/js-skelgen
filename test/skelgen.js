/**
 * generated by node,/home/paul/vows-skelgen/skelgen.js,lib/skelgen.js,--output,test/skelgen.js
 * https://github.com/pauly/js-skelgen
 * Wed Sep 04 2013 09:42:47 GMT+0000 (UTC)
 */

var assert = require( 'assert' );
var file = './../lib/skelgen.js';
var skelgen = require( file );

describe( 'skelgen.sanitise', function ( ) {
  it( 'handles good input', function ( ) {
    assert.deepEqual( skelgen.sanitise( 'foo' ), 'foo' );
    assert.deepEqual( skelgen.sanitise( 66 ), '66' );
    assert.deepEqual( skelgen.sanitise( 'foo \'bar\'' ), 'foo bar' );
  } );
  it( 'handles malformed input synchronously', function ( ) {
    assert.doesNotThrow( function ( ) {
      skelgen.sanitise( 'foo' );
      skelgen.sanitise( 66 );
      skelgen.sanitise( undefined );
      skelgen.sanitise( null );
      skelgen.sanitise( [] );
      skelgen.sanitise( {} );
      skelgen.sanitise( new Date( ) );
      skelgen.sanitise( function ( ) { } );
    } );
  } );
} );
describe( 'skelgen.uninstantiate', function ( ) {
  it( 'handles good input', function ( ) {
    assert.deepEqual( skelgen.uninstantiate( 'foo' ), 'foo' );
    assert.deepEqual( skelgen.uninstantiate( 66 ), '66' );
    assert.deepEqual( skelgen.uninstantiate( 'new foo( )' ), 'foo' );
    assert.deepEqual( skelgen.uninstantiate( 'new foo()' ), 'foo' );
  } );
  it( 'handles malformed input synchronously', function ( ) {
    assert.doesNotThrow( function ( ) {
      skelgen.uninstantiate( 'foo' );
      skelgen.uninstantiate( 66 );
      skelgen.uninstantiate( undefined );
      skelgen.uninstantiate( null );
      skelgen.uninstantiate( [] );
      skelgen.uninstantiate( {} );
      skelgen.uninstantiate( new Date( ) );
      skelgen.uninstantiate( function ( ) { } );
    } );
  } );
} );
describe( 'skelgen.baseName', function ( ) {
  it( 'handles good input', function ( ) {
    assert.deepEqual( skelgen.baseName( 'foo/bar.js' ), 'bar' );
    assert.deepEqual( skelgen.baseName( 'foo/bar' ), 'bar' );
    assert.deepEqual( skelgen.baseName( 'foo.js' ), 'foo' );
    assert.deepEqual( skelgen.baseName( 'foo' ), 'foo' );
  } );
  it( 'handles malformed input synchronously', function ( ) {
    assert.doesNotThrow( function ( ) {
      skelgen.baseName( 'foo' );
      skelgen.baseName( 66 );
      skelgen.baseName( undefined );
      skelgen.baseName( null );
      skelgen.baseName( [] );
      skelgen.baseName( {} );
      skelgen.baseName( new Date( ) );
      skelgen.baseName( function ( ) { } );
    } );
  } );
} );
describe( 'skelgen.writeTests', function ( ) {
  it( 'handles good input', function ( ) {
    // var result = skelgen.writeTests( method,obj );
    // var expect = { };
    // assert.deepEqual( result, expect ); // you write this test...
  } );
  it( 'handles malformed input synchronously', function ( ) {
    assert.doesNotThrow( function ( ) {
      skelgen.writeTests( 'foo','foo' );
      skelgen.writeTests( 66,66 );
      skelgen.writeTests( undefined,undefined );
      skelgen.writeTests( null,null );
      skelgen.writeTests( [],[] );
      skelgen.writeTests( {},{} );
      skelgen.writeTests( new Date( ),new Date( ) );
      skelgen.writeTests( function ( ) { },function ( ) { } );
    } );
  } );
} );
describe( 'skelgen.stringify', function ( ) {
  it( 'handles good input', function ( ) {
    assert.deepEqual( skelgen.stringify( 66 ), '66' );
    assert.deepEqual( skelgen.stringify( 'foo' ), '\'foo\'' );
  } );
  it( 'handles malformed input synchronously', function ( ) {
    assert.doesNotThrow( function ( ) {
      skelgen.stringify( 'foo' );
      skelgen.stringify( 66 );
      skelgen.stringify( undefined );
      skelgen.stringify( null );
      skelgen.stringify( [] );
      skelgen.stringify( {} );
      skelgen.stringify( new Date( ) );
      skelgen.stringify( function ( ) { } );
    } );
  } );
} );
describe( 'skelgen.map', function ( ) {
  it( 'handles good input', function ( ) {
    assert.deepEqual( skelgen.map( [ ], 'foo' ), [ 'foo' ] );
    assert.deepEqual( skelgen.map( [ 1 ], 'foo' ), [ 'foo' ] );
    assert.deepEqual( skelgen.map( [ 'bar' ], 'foo' ), [ 'foo' ] );
    assert.deepEqual( skelgen.map( [ 1, 2, 3 ], 'foo' ), [ 'foo', 'foo', 'foo' ] );
  } );
  it( 'handles malformed input synchronously', function ( ) {
    assert.doesNotThrow( function ( ) {
      skelgen.map( 'foo' );
      skelgen.map( 66 );
      skelgen.map( undefined );
      skelgen.map( null );
      skelgen.map( [] );
      skelgen.map( {} );
      skelgen.map( new Date( ) );
      skelgen.map( function ( ) { } );
    } );
  } );
} );
describe( 'skelgen.asyncTests', function ( ) {
  it( 'handles good input', function ( ) {
    // var result = skelgen.asyncTests( method,args );
    // var expect = { };
    // assert.deepEqual( result, expect ); // you write this test...
  } );
  it( 'handles malformed input synchronously', function ( ) {
    assert.doesNotThrow( function ( ) {
      skelgen.asyncTests( 'foo','foo' );
      skelgen.asyncTests( 66,66 );
      skelgen.asyncTests( undefined,undefined );
      skelgen.asyncTests( null,null );
      skelgen.asyncTests( [],[] );
      skelgen.asyncTests( {},{} );
      skelgen.asyncTests( new Date( ),new Date( ) );
      skelgen.asyncTests( function ( ) { },function ( ) { } );
    } );
  } );
} );
describe( 'skelgen.commentBefore', function ( ) {
  it( 'handles good input', function ( ) {
    // var result = skelgen.commentBefore( method );
    // var expect = { };
    // assert.deepEqual( result, expect ); // you write this test...
  } );
  it( 'handles malformed input synchronously', function ( ) {
    assert.doesNotThrow( function ( ) {
      skelgen.commentBefore( 'foo' );
      skelgen.commentBefore( 66 );
      skelgen.commentBefore( undefined );
      skelgen.commentBefore( null );
      skelgen.commentBefore( [] );
      skelgen.commentBefore( {} );
      skelgen.commentBefore( new Date( ) );
      skelgen.commentBefore( function ( ) { } );
    } );
  } );
} );
describe( 'skelgen.assertsFrom', function ( ) {
  it( 'handles good input', function ( ) {
    assert.deepEqual( skelgen.assertsFrom( ' * @assert (1) == 1' ), [ [ '1', '==', '1' ] ] );
    assert.deepEqual( skelgen.assertsFrom( ' * @assert (2) === 2' ), [ [ '2', '===', '2' ] ] );
    assert.deepEqual( skelgen.assertsFrom( ' * @assert ( 3 ) == 3' ), [ [ '3', '==', '3' ] ] );
    assert.deepEqual( skelgen.assertsFrom( ' * @assert ( 4) == 4\n * @assert (5 ) == 5' ), [ [ '4', '==', '4' ], [ '5', '==', '5' ], ] );
    assert.deepEqual( skelgen.assertsFrom( ' * @assert (\'seven\') == \'seven\'' ), [ [ '\'seven\'', '==', '\'seven\'' ] ] );
  } );
  it( 'handles malformed input synchronously', function ( ) {
    assert.doesNotThrow( function ( ) {
      skelgen.assertsFrom( 'foo' );
      skelgen.assertsFrom( 66 );
      skelgen.assertsFrom( undefined );
      skelgen.assertsFrom( null );
      skelgen.assertsFrom( [] );
      skelgen.assertsFrom( {} );
      skelgen.assertsFrom( new Date( ) );
      skelgen.assertsFrom( function ( ) { } );
    } );
  } );
} );
describe( 'skelgen.goodInputTests', function ( ) {
  it( 'handles good input', function ( ) {
    // var result = skelgen.goodInputTests( method,params );
    // var expect = { };
    // assert.deepEqual( result, expect ); // you write this test...
  } );
  it( 'handles malformed input synchronously', function ( ) {
    assert.doesNotThrow( function ( ) {
      skelgen.goodInputTests( 'foo','foo' );
      skelgen.goodInputTests( 66,66 );
      skelgen.goodInputTests( undefined,undefined );
      skelgen.goodInputTests( null,null );
      skelgen.goodInputTests( [],[] );
      skelgen.goodInputTests( {},{} );
      skelgen.goodInputTests( new Date( ),new Date( ) );
      skelgen.goodInputTests( function ( ) { },function ( ) { } );
    } );
  } );
} );
describe( 'skelgen.goodInputTestsAsync', function ( ) {
  it( 'handles good input', function ( ) {
    // var result = skelgen.goodInputTestsAsync( method,params );
    // var expect = { };
    // assert.deepEqual( result, expect ); // you write this test...
  } );
  it( 'handles malformed input synchronously', function ( ) {
    assert.doesNotThrow( function ( ) {
      skelgen.goodInputTestsAsync( 'foo','foo' );
      skelgen.goodInputTestsAsync( 66,66 );
      skelgen.goodInputTestsAsync( undefined,undefined );
      skelgen.goodInputTestsAsync( null,null );
      skelgen.goodInputTestsAsync( [],[] );
      skelgen.goodInputTestsAsync( {},{} );
      skelgen.goodInputTestsAsync( new Date( ),new Date( ) );
      skelgen.goodInputTestsAsync( function ( ) { },function ( ) { } );
    } );
  } );
} );
describe( 'skelgen.syncTests', function ( ) {
  it( 'handles good input', function ( ) {
    // var result = skelgen.syncTests( method,args );
    // var expect = { };
    // assert.deepEqual( result, expect ); // you write this test...
  } );
  it( 'handles malformed input synchronously', function ( ) {
    assert.doesNotThrow( function ( ) {
      skelgen.syncTests( 'foo','foo' );
      skelgen.syncTests( 66,66 );
      skelgen.syncTests( undefined,undefined );
      skelgen.syncTests( null,null );
      skelgen.syncTests( [],[] );
      skelgen.syncTests( {},{} );
      skelgen.syncTests( new Date( ),new Date( ) );
      skelgen.syncTests( function ( ) { },function ( ) { } );
    } );
  } );
} );
describe( 'skelgen.generate', function ( ) {
  it( 'handles good input', function ( ) {
    // var result = skelgen.generate(  );
    // var expect = { };
    // assert.deepEqual( result, expect ); // you write this test...
  } );
  it( 'handles malformed input synchronously', function ( ) {
    assert.doesNotThrow( function ( ) {
      skelgen.generate( 'foo' );
      skelgen.generate( 66 );
      skelgen.generate( undefined );
      skelgen.generate( null );
      skelgen.generate( [] );
      skelgen.generate( {} );
      skelgen.generate( new Date( ) );
      skelgen.generate( function ( ) { } );
    } );
  } );
} );
describe( 'skelgen.arbitraryAsyncMethod with good input', function ( ) {
  it( 'handles foo', function ( done ) {
    skelgen.arbitraryAsyncMethod( 'foo', function( err, result ) {
      assert.deepEqual( err, null );
      assert.deepEqual( result, 'hey foo' );
      done( );
    } );
  } );
  it( 'handles 6', function ( done ) {
    skelgen.arbitraryAsyncMethod( '6', function( err, result ) {
      assert.deepEqual( err, null );
      assert.deepEqual( result, 'hey 6' );
      done( );
    } );
  } );
  it( 'handles null', function ( done ) {
    skelgen.arbitraryAsyncMethod( null, function( err, result ) {
      assert.deepEqual( err, null );
      assert.deepEqual( result, 'hey null' );
      done( );
    } );
  } );
} );

describe( 'skelgen.arbitraryAsyncMethod with malformed input', function ( ) {
  it( 'handles foo', function ( ) {
    skelgen.arbitraryAsyncMethod( 'foo', function ( err, result ) {
      console.log( 'skelgen.arbitraryAsyncMethod', 'foo', 'returns', err, result );
      // assert.equal( err, null );
    } );
  } );
  it( 'handles 66', function ( ) {
    skelgen.arbitraryAsyncMethod( 66, function ( err, result ) {
      console.log( 'skelgen.arbitraryAsyncMethod', 66, 'returns', err, result );
      // assert.equal( err, null );
    } );
  } );
  it( 'handles undefined', function ( ) {
    skelgen.arbitraryAsyncMethod( undefined, function ( err, result ) {
      console.log( 'skelgen.arbitraryAsyncMethod', undefined, 'returns', err, result );
      // assert.equal( err, null );
    } );
  } );
  it( 'handles null', function ( ) {
    skelgen.arbitraryAsyncMethod( null, function ( err, result ) {
      console.log( 'skelgen.arbitraryAsyncMethod', null, 'returns', err, result );
      // assert.equal( err, null );
    } );
  } );
  it( 'handles []', function ( ) {
    skelgen.arbitraryAsyncMethod( [], function ( err, result ) {
      console.log( 'skelgen.arbitraryAsyncMethod', [], 'returns', err, result );
      // assert.equal( err, null );
    } );
  } );
  it( 'handles {}', function ( ) {
    skelgen.arbitraryAsyncMethod( {}, function ( err, result ) {
      console.log( 'skelgen.arbitraryAsyncMethod', {}, 'returns', err, result );
      // assert.equal( err, null );
    } );
  } );
  it( 'handles new Date( )', function ( ) {
    skelgen.arbitraryAsyncMethod( new Date( ), function ( err, result ) {
      console.log( 'skelgen.arbitraryAsyncMethod', new Date( ), 'returns', err, result );
      // assert.equal( err, null );
    } );
  } );
  it( 'handles function ( ) { }', function ( ) {
    skelgen.arbitraryAsyncMethod( function ( ) { }, function ( err, result ) {
      console.log( 'skelgen.arbitraryAsyncMethod', function ( ) { }, 'returns', err, result );
      // assert.equal( err, null );
    } );
  } );
} );
describe( 'skelgen.anotherArbitraryAsyncMethod with good input', function ( ) {
  it( 'handles foo' );
} );

describe( 'skelgen.anotherArbitraryAsyncMethod with malformed input', function ( ) {
  it( 'handles foo', function ( ) {
    skelgen.anotherArbitraryAsyncMethod( 'foo', function ( err, result ) {
      console.log( 'skelgen.anotherArbitraryAsyncMethod', 'foo', 'returns', err, result );
      // assert.equal( err, null );
    } );
  } );
  it( 'handles 66', function ( ) {
    skelgen.anotherArbitraryAsyncMethod( 66, function ( err, result ) {
      console.log( 'skelgen.anotherArbitraryAsyncMethod', 66, 'returns', err, result );
      // assert.equal( err, null );
    } );
  } );
  it( 'handles undefined', function ( ) {
    skelgen.anotherArbitraryAsyncMethod( undefined, function ( err, result ) {
      console.log( 'skelgen.anotherArbitraryAsyncMethod', undefined, 'returns', err, result );
      // assert.equal( err, null );
    } );
  } );
  it( 'handles null', function ( ) {
    skelgen.anotherArbitraryAsyncMethod( null, function ( err, result ) {
      console.log( 'skelgen.anotherArbitraryAsyncMethod', null, 'returns', err, result );
      // assert.equal( err, null );
    } );
  } );
  it( 'handles []', function ( ) {
    skelgen.anotherArbitraryAsyncMethod( [], function ( err, result ) {
      console.log( 'skelgen.anotherArbitraryAsyncMethod', [], 'returns', err, result );
      // assert.equal( err, null );
    } );
  } );
  it( 'handles {}', function ( ) {
    skelgen.anotherArbitraryAsyncMethod( {}, function ( err, result ) {
      console.log( 'skelgen.anotherArbitraryAsyncMethod', {}, 'returns', err, result );
      // assert.equal( err, null );
    } );
  } );
  it( 'handles new Date( )', function ( ) {
    skelgen.anotherArbitraryAsyncMethod( new Date( ), function ( err, result ) {
      console.log( 'skelgen.anotherArbitraryAsyncMethod', new Date( ), 'returns', err, result );
      // assert.equal( err, null );
    } );
  } );
  it( 'handles function ( ) { }', function ( ) {
    skelgen.anotherArbitraryAsyncMethod( function ( ) { }, function ( err, result ) {
      console.log( 'skelgen.anotherArbitraryAsyncMethod', function ( ) { }, 'returns', err, result );
      // assert.equal( err, null );
    } );
  } );
} );
