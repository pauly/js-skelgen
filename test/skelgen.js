'use strict';
/**
 * generated by node,/Users/paul.clarke/work/js-skelgen/skelgen.js,lib/skelgen.js,--output,test/skelgen.js
 * https://github.com/pauly/vows-skelgen
 * Wed May 18 2016 10:52:00 GMT+0100 (BST)
 */

var expect = require('chai').use(require('dirty-chai')).expect;
var assert = require('assert');
var file = './../lib/skelgen.js';
var skelgen = require(file);

describe('./../lib/skelgen.js', function() {
  describe('skelgen.sanitise', function() {
    it('handles good input', function() {
      expect(skelgen.sanitise('foo')).to.deep.equal('foo'); // goodInputTests
      expect(skelgen.sanitise(66)).to.deep.equal('66'); // goodInputTests
      expect(skelgen.sanitise('foo \'bar\'')).to.deep.equal('foo bar'); // goodInputTests
    });
    it('handles malformed input', function() {
      expect(function () {
        skelgen.sanitise('foo');
        skelgen.sanitise(66);
        skelgen.sanitise(undefined);
        skelgen.sanitise(null);
        skelgen.sanitise([]);
        skelgen.sanitise({});
        skelgen.sanitise(new Date());
        skelgen.sanitise(function () { });
      }).not.to.throw();
    });
  });
  describe('skelgen.uninstantiate', function() {
    it('handles good input', function() {
      expect(skelgen.uninstantiate('foo')).to.deep.equal('foo'); // goodInputTests
      expect(skelgen.uninstantiate(66)).to.deep.equal('66'); // goodInputTests
      expect(skelgen.uninstantiate('new foo()')).to.deep.equal('foo'); // goodInputTests
      expect(skelgen.uninstantiate('new foo()')).to.deep.equal('foo'); // goodInputTests
    });
    it('handles malformed input', function() {
      expect(function () {
        skelgen.uninstantiate('foo');
        skelgen.uninstantiate(66);
        skelgen.uninstantiate(undefined);
        skelgen.uninstantiate(null);
        skelgen.uninstantiate([]);
        skelgen.uninstantiate({});
        skelgen.uninstantiate(new Date());
        skelgen.uninstantiate(function () { });
      }).not.to.throw();
    });
  });
  describe('skelgen.baseName', function() {
    it('handles good input', function() {
      expect(skelgen.baseName('foo/bar.js')).to.deep.equal('bar'); // goodInputTests
      expect(skelgen.baseName('foo/bar')).to.deep.equal('bar'); // goodInputTests
      expect(skelgen.baseName('foo.js')).to.deep.equal('foo'); // goodInputTests
      expect(skelgen.baseName('foo')).to.deep.equal('foo'); // goodInputTests
    });
    it('handles malformed input', function() {
      expect(function () {
        skelgen.baseName('foo');
        skelgen.baseName(66);
        skelgen.baseName(undefined);
        skelgen.baseName(null);
        skelgen.baseName([]);
        skelgen.baseName({});
        skelgen.baseName(new Date());
        skelgen.baseName(function () { });
      }).not.to.throw();
    });
  });
  describe('skelgen.writeTests', function() {
    it('handles malformed input', function() {
      expect(function () {
        skelgen.writeTests('foo', 'foo', 'foo');
        skelgen.writeTests(66, 66, 66);
        skelgen.writeTests(undefined, undefined, undefined);
        skelgen.writeTests(null, null, null);
        skelgen.writeTests([], [], []);
        skelgen.writeTests({}, {}, {});
        skelgen.writeTests(new Date(), new Date(), new Date());
        skelgen.writeTests(function () { }, function () { }, function () { });
      }).not.to.throw();
    });
  });
  describe('skelgen.stringify', function() {
    it('handles good input', function() {
      expect(skelgen.stringify(66)).to.deep.equal('66'); // goodInputTests
      expect(skelgen.stringify('foo')).to.deep.equal('\'foo\''); // goodInputTests
    });
    it('handles malformed input', function() {
      expect(function () {
        skelgen.stringify('foo');
        skelgen.stringify(66);
        skelgen.stringify(undefined);
        skelgen.stringify(null);
        skelgen.stringify([]);
        skelgen.stringify({});
        skelgen.stringify(new Date());
        skelgen.stringify(function () { });
      }).not.to.throw();
    });
  });
  describe('skelgen.map', function() {
    it('handles good input', function() {
      expect(skelgen.map([], 'foo')).to.deep.equal(['foo']); // goodInputTests
      expect(skelgen.map([1], 'foo')).to.deep.equal(['foo']); // goodInputTests
      expect(skelgen.map(['bar'], 'foo')).to.deep.equal(['foo']); // goodInputTests
      var expected = ['foo', 'foo', 'foo'];
      expect(skelgen.map([1, 2, 3], 'foo')).to.deep.equal(expected); // goodInputTests
    });
    it('handles malformed input', function() {
      expect(function () {
        skelgen.map('foo', 'foo');
        skelgen.map(66, 66);
        skelgen.map(undefined, undefined);
        skelgen.map(null, null);
        skelgen.map([], []);
        skelgen.map({}, {});
        skelgen.map(new Date(), new Date());
        skelgen.map(function () { }, function () { });
      }).not.to.throw();
    });
  });
  describe('skelgen.asyncTests', function() {
    it('handles malformed input', function() {
      expect(function () {
        skelgen.asyncTests('foo', 'foo', 'foo');
        skelgen.asyncTests(66, 66, 66);
        skelgen.asyncTests(undefined, undefined, undefined);
        skelgen.asyncTests(null, null, null);
        skelgen.asyncTests([], [], []);
        skelgen.asyncTests({}, {}, {});
        skelgen.asyncTests(new Date(), new Date(), new Date());
        skelgen.asyncTests(function () { }, function () { }, function () { });
      }).not.to.throw();
    });
  });
  describe('skelgen.commentBefore', function() {
    it('handles good input', function() {
      expect(skelgen.commentBefore('foo', 'bar')).to.deep.equal(null); // goodInputTests
    });
    it('handles malformed input', function() {
      expect(function () {
        skelgen.commentBefore('foo', 'foo');
        skelgen.commentBefore(66, 66);
        skelgen.commentBefore(undefined, undefined);
        skelgen.commentBefore(null, null);
        skelgen.commentBefore([], []);
        skelgen.commentBefore({}, {});
        skelgen.commentBefore(new Date(), new Date());
        skelgen.commentBefore(function () { }, function () { });
      }).not.to.throw();
    });
  });
  describe('skelgen.assertsFrom', function() {
    it('handles good input', function() {
      var expected = [['1', '==', '1', '']];
      expect(skelgen.assertsFrom(' * @assert (1) == 1')).to.deep.equal(expected); // goodInputTests
      expected = [['2', '===', '2', '']];
      expect(skelgen.assertsFrom(' * @assert (2) === 2')).to.deep.equal(expected); // goodInputTests
      expected = [['3', '==', '3', '']];
      expect(skelgen.assertsFrom(' * @assert (3) == 3')).to.deep.equal(expected); // goodInputTests
      expected = [['4', '==', '4', ''], ['5', '==', '5', '']];
      expect(skelgen.assertsFrom(' * @assert (4) == 4\n * @assert (5) == 5')).to.deep.equal(expected); // goodInputTests
      expected = [['\'seven\'', '==', '\'seven\'', '']];
      expect(skelgen.assertsFrom(' * @assert (\'seven\') == \'seven\'')).to.deep.equal(expected); // goodInputTests
      expected = [['1', '==', '1', '.foo']];
      expect(skelgen.assertsFrom(' * @assert (1).foo == 1')).to.deep.equal(expected); // goodInputTests
      expected = [['2', '===', '2', '.foo']];
      expect(skelgen.assertsFrom(' * @assert (2).foo === 2')).to.deep.equal(expected); // goodInputTests
      expected = [['3', '==', '3', '.foo']];
      expect(skelgen.assertsFrom(' * @assert (3).foo == 3')).to.deep.equal(expected); // goodInputTests
      expected = [['4', '==', '4', '.foo'], ['5', '==', '5', '']];
      expect(skelgen.assertsFrom(' * @assert (4).foo == 4\n * @assert (5) == 5')).to.deep.equal(expected); // goodInputTests
      expected = [['4', '==', '4', ''], ['5', '==', '5', '.foo']];
      expect(skelgen.assertsFrom(' * @assert (4) == 4\n * @assert (5).foo == 5')).to.deep.equal(expected); // goodInputTests
      expected = [['4', '==', '4', '.foo'], ['5', '==', '5', '.foo']];
      expect(skelgen.assertsFrom(' * @assert (4).foo == 4\n * @assert (5).foo == 5')).to.deep.equal(expected); // goodInputTests
      expected = [['\'seven\'', '==', '\'seven\'', '.foo']];
      expect(skelgen.assertsFrom(' * @assert (\'seven\').foo == \'seven\'')).to.deep.equal(expected); // goodInputTests
      expected = [['1', '==', '1', '[0]']];
      expect(skelgen.assertsFrom(' * @assert (1)[0] == 1')).to.deep.equal(expected); // goodInputTests
      expected = [['2', '===', '2', '[0]']];
      expect(skelgen.assertsFrom(' * @assert (2)[0] === 2')).to.deep.equal(expected); // goodInputTests
      expected = [['3', '==', '3', '[0]']];
      expect(skelgen.assertsFrom(' * @assert (3)[0] == 3')).to.deep.equal(expected); // goodInputTests
      expected = [['4', '==', '4', '[0]'], ['5', '==', '5', '']];
      expect(skelgen.assertsFrom(' * @assert (4)[0] == 4\n * @assert (5) == 5')).to.deep.equal(expected); // goodInputTests
      expected = [['4', '==', '4', ''], ['5', '==', '5', '[0]']];
      expect(skelgen.assertsFrom(' * @assert (4) == 4\n * @assert (5)[0] == 5')).to.deep.equal(expected); // goodInputTests
      expected = [['4', '==', '4', '[0]'], ['5', '==', '5', '[0]']];
      expect(skelgen.assertsFrom(' * @assert (4)[0] == 4\n * @assert (5)[0] == 5')).to.deep.equal(expected); // goodInputTests
      expected = [['\'seven\'', '==', '\'seven\'', '[0]']];
      expect(skelgen.assertsFrom(' * @assert (\'seven\')[0] == \'seven\'')).to.deep.equal(expected); // goodInputTests
    });
    it('handles malformed input', function() {
      expect(function () {
        skelgen.assertsFrom('foo');
        skelgen.assertsFrom(66);
        skelgen.assertsFrom(undefined);
        skelgen.assertsFrom(null);
        skelgen.assertsFrom([]);
        skelgen.assertsFrom({});
        skelgen.assertsFrom(new Date());
        skelgen.assertsFrom(function () { });
      }).not.to.throw();
    });
  });
  describe('skelgen.fixturesFrom', function() {
    it('handles good input', function() {
      var expected = ['./foo.js', '../foo/bar.js'];
      expect(skelgen.fixturesFrom(' * @fixture ./foo.js\n * @fixture ../foo/bar.js ')).to.deep.equal(expected); // goodInputTests
    });
    it('handles malformed input', function() {
      expect(function () {
        skelgen.fixturesFrom('foo');
        skelgen.fixturesFrom(66);
        skelgen.fixturesFrom(undefined);
        skelgen.fixturesFrom(null);
        skelgen.fixturesFrom([]);
        skelgen.fixturesFrom({});
        skelgen.fixturesFrom(new Date());
        skelgen.fixturesFrom(function () { });
      }).not.to.throw();
    });
  });
  describe('skelgen.goodInputTests', function() {
    it('handles malformed input', function() {
      expect(function () {
        skelgen.goodInputTests('foo', 'foo');
        skelgen.goodInputTests(66, 66);
        skelgen.goodInputTests(undefined, undefined);
        skelgen.goodInputTests(null, null);
        skelgen.goodInputTests([], []);
        skelgen.goodInputTests({}, {});
        skelgen.goodInputTests(new Date(), new Date());
        skelgen.goodInputTests(function () { }, function () { });
      }).not.to.throw();
    });
  });
  describe('skelgen._dummyAsyncMethod', function() {
    describe('malformed input', function() {
      it('handles foo', function (done) {
        skelgen._dummyAsyncMethod('foo', function () {
          assert.ok(true);
          done();
        });
      });
      it('handles 66', function (done) {
        skelgen._dummyAsyncMethod(66, function () {
          assert.ok(true);
          done();
        });
      });
      it('handles undefined', function (done) {
        skelgen._dummyAsyncMethod(undefined, function () {
          assert.ok(true);
          done();
        });
      });
      it('handles null', function (done) {
        skelgen._dummyAsyncMethod(null, function () {
          assert.ok(true);
          done();
        });
      });
      it('handles []', function (done) {
        skelgen._dummyAsyncMethod([], function () {
          assert.ok(true);
          done();
        });
      });
      it('handles {}', function (done) {
        skelgen._dummyAsyncMethod({}, function () {
          assert.ok(true);
          done();
        });
      });
      it('handles new Date()', function (done) {
        skelgen._dummyAsyncMethod(new Date(), function () {
          assert.ok(true);
          done();
        });
      });
      it('handles function () { }', function (done) {
        skelgen._dummyAsyncMethod(function () { }, function () {
          assert.ok(true);
          done();
        });
      });

    });
  });
  describe('skelgen.goodInputTestsAsync', function() {
    it('handles malformed input', function() {
      expect(function () {
        skelgen.goodInputTestsAsync('foo', 'foo', 'foo');
        skelgen.goodInputTestsAsync(66, 66, 66);
        skelgen.goodInputTestsAsync(undefined, undefined, undefined);
        skelgen.goodInputTestsAsync(null, null, null);
        skelgen.goodInputTestsAsync([], [], []);
        skelgen.goodInputTestsAsync({}, {}, {});
        skelgen.goodInputTestsAsync(new Date(), new Date(), new Date());
        skelgen.goodInputTestsAsync(function () { }, function () { }, function () { });
      }).not.to.throw();
    });
  });
  describe('skelgen.syncTests', function() {
    it('handles malformed input', function() {
      expect(function () {
        skelgen.syncTests('foo', 'foo', 'foo');
        skelgen.syncTests(66, 66, 66);
        skelgen.syncTests(undefined, undefined, undefined);
        skelgen.syncTests(null, null, null);
        skelgen.syncTests([], [], []);
        skelgen.syncTests({}, {}, {});
        skelgen.syncTests(new Date(), new Date(), new Date());
        skelgen.syncTests(function () { }, function () { }, function () { });
      }).not.to.throw();
    });
  });
  describe('skelgen.generate', function() {
    it('handles malformed input', function() {
      expect(function () {
        skelgen.generate('foo');
        skelgen.generate(66);
        skelgen.generate(undefined);
        skelgen.generate(null);
        skelgen.generate([]);
        skelgen.generate({});
        skelgen.generate(new Date());
        skelgen.generate(function () { });
      }).not.to.throw();
    });
  });

});
