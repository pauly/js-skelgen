/**
 * generated by /home/paul/vows-skelgen/skelgen.js
 * https://github.com/pauly/vows-skelgen
 * @todo parse the file and use params / @assert rules
 * Wed Jul 17 2013 13:02:35 GMT+0000 (UTC)
 */

var assert = require( 'assert' );
var vows = require( 'vows' );
var file = '/home/paul/vows-skelgen/lib/skelgen.js';
var skelgen = require( file );

vows.describe( 'skelgen' ).addBatch( {
  'skelgen.foo': {
    'handles good input': function ( ) {
      // var result = skelgen.foo( );
      // var expect = { };
      // assert.equal( result, expect );
    },
    'handles bad input': {
      /* args = bar,baz,etc, so params = 'foo','foo','foo' */
      'handles foo': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.foo( 'foo','foo','foo' );
          }
        );
        // var result = skelgen.foo( 'foo','foo','foo' );
        // assert.equal( result, null );
      },
      /* args = bar,baz,etc, so params = 66,66,66 */
      'handles 66': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.foo( 66,66,66 );
          }
        );
        // var result = skelgen.foo( 66,66,66 );
        // assert.equal( result, null );
      },
      /* args = bar,baz,etc, so params = undefined,undefined,undefined */
      'handles undefined': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.foo( undefined,undefined,undefined );
          }
        );
        // var result = skelgen.foo( undefined,undefined,undefined );
        // assert.equal( result, null );
      },
      /* args = bar,baz,etc, so params = null,null,null */
      'handles null': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.foo( null,null,null );
          }
        );
        // var result = skelgen.foo( null,null,null );
        // assert.equal( result, null );
      },
      /* args = bar,baz,etc, so params = [],[],[] */
      'handles []': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.foo( [],[],[] );
          }
        );
        // var result = skelgen.foo( [],[],[] );
        // assert.equal( result, null );
      },
      /* args = bar,baz,etc, so params = {},{},{} */
      'handles {}': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.foo( {},{},{} );
          }
        );
        // var result = skelgen.foo( {},{},{} );
        // assert.equal( result, null );
      },
      /* args = bar,baz,etc, so params = new Date( ),new Date( ),new Date( ) */
      'handles new Date( )': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.foo( new Date( ),new Date( ),new Date( ) );
          }
        );
        // var result = skelgen.foo( new Date( ),new Date( ),new Date( ) );
        // assert.equal( result, null );
      }
    }
  },
  'skelgen.baseName': {
    'handles good input': function ( ) {
      // var result = skelgen.baseName( );
      // var expect = { };
      // assert.equal( result, expect );
    },
    'handles bad input': {
      /* args = file, so params = 'foo' */
      'handles foo': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.baseName( 'foo' );
          }
        );
        // var result = skelgen.baseName( 'foo' );
        // assert.equal( result, null );
      },
      /* args = file, so params = 66 */
      'handles 66': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.baseName( 66 );
          }
        );
        // var result = skelgen.baseName( 66 );
        // assert.equal( result, null );
      },
      /* args = file, so params = undefined */
      'handles undefined': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.baseName( undefined );
          }
        );
        // var result = skelgen.baseName( undefined );
        // assert.equal( result, null );
      },
      /* args = file, so params = null */
      'handles null': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.baseName( null );
          }
        );
        // var result = skelgen.baseName( null );
        // assert.equal( result, null );
      },
      /* args = file, so params = [] */
      'handles []': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.baseName( [] );
          }
        );
        // var result = skelgen.baseName( [] );
        // assert.equal( result, null );
      },
      /* args = file, so params = {} */
      'handles {}': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.baseName( {} );
          }
        );
        // var result = skelgen.baseName( {} );
        // assert.equal( result, null );
      },
      /* args = file, so params = new Date( ) */
      'handles new Date( )': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.baseName( new Date( ) );
          }
        );
        // var result = skelgen.baseName( new Date( ) );
        // assert.equal( result, null );
      }
    }
  },
  'skelgen.getFile': {
    'handles good input': function ( ) {
      // var result = skelgen.getFile( );
      // var expect = { };
      // assert.equal( result, expect );
    },
    'handles bad input': {
      /* args = file, so params = 'foo' */
      'handles foo': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.getFile( 'foo' );
          }
        );
        // var result = skelgen.getFile( 'foo' );
        // assert.equal( result, null );
      },
      /* args = file, so params = 66 */
      'handles 66': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.getFile( 66 );
          }
        );
        // var result = skelgen.getFile( 66 );
        // assert.equal( result, null );
      },
      /* args = file, so params = undefined */
      'handles undefined': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.getFile( undefined );
          }
        );
        // var result = skelgen.getFile( undefined );
        // assert.equal( result, null );
      },
      /* args = file, so params = null */
      'handles null': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.getFile( null );
          }
        );
        // var result = skelgen.getFile( null );
        // assert.equal( result, null );
      },
      /* args = file, so params = [] */
      'handles []': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.getFile( [] );
          }
        );
        // var result = skelgen.getFile( [] );
        // assert.equal( result, null );
      },
      /* args = file, so params = {} */
      'handles {}': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.getFile( {} );
          }
        );
        // var result = skelgen.getFile( {} );
        // assert.equal( result, null );
      },
      /* args = file, so params = new Date( ) */
      'handles new Date( )': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.getFile( new Date( ) );
          }
        );
        // var result = skelgen.getFile( new Date( ) );
        // assert.equal( result, null );
      }
    }
  },
  'skelgen.writeTests': {
    'handles good input': function ( ) {
      // var result = skelgen.writeTests( );
      // var expect = { };
      // assert.equal( result, expect );
    },
    'handles bad input': {
      /* args = methodName,obj, so params = 'foo','foo' */
      'handles foo': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.writeTests( 'foo','foo' );
          }
        );
        // var result = skelgen.writeTests( 'foo','foo' );
        // assert.equal( result, null );
      },
      /* args = methodName,obj, so params = 66,66 */
      'handles 66': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.writeTests( 66,66 );
          }
        );
        // var result = skelgen.writeTests( 66,66 );
        // assert.equal( result, null );
      },
      /* args = methodName,obj, so params = undefined,undefined */
      'handles undefined': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.writeTests( undefined,undefined );
          }
        );
        // var result = skelgen.writeTests( undefined,undefined );
        // assert.equal( result, null );
      },
      /* args = methodName,obj, so params = null,null */
      'handles null': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.writeTests( null,null );
          }
        );
        // var result = skelgen.writeTests( null,null );
        // assert.equal( result, null );
      },
      /* args = methodName,obj, so params = [],[] */
      'handles []': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.writeTests( [],[] );
          }
        );
        // var result = skelgen.writeTests( [],[] );
        // assert.equal( result, null );
      },
      /* args = methodName,obj, so params = {},{} */
      'handles {}': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.writeTests( {},{} );
          }
        );
        // var result = skelgen.writeTests( {},{} );
        // assert.equal( result, null );
      },
      /* args = methodName,obj, so params = new Date( ),new Date( ) */
      'handles new Date( )': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.writeTests( new Date( ),new Date( ) );
          }
        );
        // var result = skelgen.writeTests( new Date( ),new Date( ) );
        // assert.equal( result, null );
      }
    }
  },
  'skelgen.stringify': {
    'handles good input': function ( ) {
      // var result = skelgen.stringify( );
      // var expect = { };
      // assert.equal( result, expect );
    },
    'handles bad input': {
      /* args = data, so params = 'foo' */
      'handles foo': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.stringify( 'foo' );
          }
        );
        // var result = skelgen.stringify( 'foo' );
        // assert.equal( result, null );
      },
      /* args = data, so params = 66 */
      'handles 66': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.stringify( 66 );
          }
        );
        // var result = skelgen.stringify( 66 );
        // assert.equal( result, null );
      },
      /* args = data, so params = undefined */
      'handles undefined': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.stringify( undefined );
          }
        );
        // var result = skelgen.stringify( undefined );
        // assert.equal( result, null );
      },
      /* args = data, so params = null */
      'handles null': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.stringify( null );
          }
        );
        // var result = skelgen.stringify( null );
        // assert.equal( result, null );
      },
      /* args = data, so params = [] */
      'handles []': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.stringify( [] );
          }
        );
        // var result = skelgen.stringify( [] );
        // assert.equal( result, null );
      },
      /* args = data, so params = {} */
      'handles {}': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.stringify( {} );
          }
        );
        // var result = skelgen.stringify( {} );
        // assert.equal( result, null );
      },
      /* args = data, so params = new Date( ) */
      'handles new Date( )': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.stringify( new Date( ) );
          }
        );
        // var result = skelgen.stringify( new Date( ) );
        // assert.equal( result, null );
      }
    }
  },
  'skelgen.asyncTests': {
    'handles good input': function ( ) {
      // var result = skelgen.asyncTests( );
      // var expect = { };
      // assert.equal( result, expect );
    },
    'handles bad input': {
      /* args = methodName,args, so params = 'foo','foo' */
      'handles foo': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.asyncTests( 'foo','foo' );
          }
        );
        // var result = skelgen.asyncTests( 'foo','foo' );
        // assert.equal( result, null );
      },
      /* args = methodName,args, so params = 66,66 */
      'handles 66': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.asyncTests( 66,66 );
          }
        );
        // var result = skelgen.asyncTests( 66,66 );
        // assert.equal( result, null );
      },
      /* args = methodName,args, so params = undefined,undefined */
      'handles undefined': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.asyncTests( undefined,undefined );
          }
        );
        // var result = skelgen.asyncTests( undefined,undefined );
        // assert.equal( result, null );
      },
      /* args = methodName,args, so params = null,null */
      'handles null': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.asyncTests( null,null );
          }
        );
        // var result = skelgen.asyncTests( null,null );
        // assert.equal( result, null );
      },
      /* args = methodName,args, so params = [],[] */
      'handles []': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.asyncTests( [],[] );
          }
        );
        // var result = skelgen.asyncTests( [],[] );
        // assert.equal( result, null );
      },
      /* args = methodName,args, so params = {},{} */
      'handles {}': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.asyncTests( {},{} );
          }
        );
        // var result = skelgen.asyncTests( {},{} );
        // assert.equal( result, null );
      },
      /* args = methodName,args, so params = new Date( ),new Date( ) */
      'handles new Date( )': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.asyncTests( new Date( ),new Date( ) );
          }
        );
        // var result = skelgen.asyncTests( new Date( ),new Date( ) );
        // assert.equal( result, null );
      }
    }
  },
  'skelgen.syncTests': {
    'handles good input': function ( ) {
      // var result = skelgen.syncTests( );
      // var expect = { };
      // assert.equal( result, expect );
    },
    'handles bad input': {
      /* args = methodName,args, so params = 'foo','foo' */
      'handles foo': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.syncTests( 'foo','foo' );
          }
        );
        // var result = skelgen.syncTests( 'foo','foo' );
        // assert.equal( result, null );
      },
      /* args = methodName,args, so params = 66,66 */
      'handles 66': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.syncTests( 66,66 );
          }
        );
        // var result = skelgen.syncTests( 66,66 );
        // assert.equal( result, null );
      },
      /* args = methodName,args, so params = undefined,undefined */
      'handles undefined': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.syncTests( undefined,undefined );
          }
        );
        // var result = skelgen.syncTests( undefined,undefined );
        // assert.equal( result, null );
      },
      /* args = methodName,args, so params = null,null */
      'handles null': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.syncTests( null,null );
          }
        );
        // var result = skelgen.syncTests( null,null );
        // assert.equal( result, null );
      },
      /* args = methodName,args, so params = [],[] */
      'handles []': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.syncTests( [],[] );
          }
        );
        // var result = skelgen.syncTests( [],[] );
        // assert.equal( result, null );
      },
      /* args = methodName,args, so params = {},{} */
      'handles {}': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.syncTests( {},{} );
          }
        );
        // var result = skelgen.syncTests( {},{} );
        // assert.equal( result, null );
      },
      /* args = methodName,args, so params = new Date( ),new Date( ) */
      'handles new Date( )': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.syncTests( new Date( ),new Date( ) );
          }
        );
        // var result = skelgen.syncTests( new Date( ),new Date( ) );
        // assert.equal( result, null );
      }
    }
  },
  'skelgen.generate': {
    'handles good input': function ( ) {
      // var result = skelgen.generate( );
      // var expect = { };
      // assert.equal( result, expect );
    },
    'handles bad input': {
      /* args = , so params = 'foo' */
      'handles foo': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.generate( 'foo' );
          }
        );
        // var result = skelgen.generate( 'foo' );
        // assert.equal( result, null );
      },
      /* args = , so params = 66 */
      'handles 66': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.generate( 66 );
          }
        );
        // var result = skelgen.generate( 66 );
        // assert.equal( result, null );
      },
      /* args = , so params = undefined */
      'handles undefined': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.generate( undefined );
          }
        );
        // var result = skelgen.generate( undefined );
        // assert.equal( result, null );
      },
      /* args = , so params = null */
      'handles null': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.generate( null );
          }
        );
        // var result = skelgen.generate( null );
        // assert.equal( result, null );
      },
      /* args = , so params = [] */
      'handles []': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.generate( [] );
          }
        );
        // var result = skelgen.generate( [] );
        // assert.equal( result, null );
      },
      /* args = , so params = {} */
      'handles {}': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.generate( {} );
          }
        );
        // var result = skelgen.generate( {} );
        // assert.equal( result, null );
      },
      /* args = , so params = new Date( ) */
      'handles new Date( )': function ( ) {
        assert.doesNotThrow(
          function ( ) {
            skelgen.generate( new Date( ) );
          }
        );
        // var result = skelgen.generate( new Date( ) );
        // assert.equal( result, null );
      }
    }
  }
} ).run( );

